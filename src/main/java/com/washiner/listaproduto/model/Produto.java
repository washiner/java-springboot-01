package com.washiner.listaproduto.model;

import jakarta.persistence.*;
import java.util.Objects;

@Entity
@Table(name = "produto") // Nome da tabela no banco
public class Produto { // Nome da classe com inicial mai√∫scula (Padr√£o Java)

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Gera√ß√£o autom√°tica de ID
    private Long id;

    @Column(name = "nome", nullable = false, length = 100) // Nome do produto (n√£o pode ser nulo)
    private String nome;

    @Column(name = "descricao", nullable = false, length = 150) // Descri√ß√£o do produto
    private String descricao;

    // üîπ Construtor Padr√£o (Obrigat√≥rio para JPA)
    public Produto() {}

    // üîπ Construtor com Par√¢metros
    public Produto(Long id, String nome, String descricao) {
        this.id = id;
        this.nome = nome;
        this.descricao = descricao;
    }

    // üîπ Getters e Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getNome() { return nome; }
    public void setNome(String nome) { this.nome = nome; }

    public String getDescricao() { return descricao; }
    public void setDescricao(String descricao) { this.descricao = descricao; }

    // üîπ M√©todos para comparar objetos (importante para cole√ß√µes e opera√ß√µes com JPA)
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Produto produto = (Produto) o;
        return Objects.equals(id, produto.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    // üîπ M√©todo toString para facilitar depura√ß√£o
    @Override
    public String toString() {
        return "Produto{" +
                "id=" + id +
                ", nome='" + nome + '\'' +
                ", descricao='" + descricao + '\'' +
                '}';
    }
}